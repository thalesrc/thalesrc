# Thales Auto Proxy Stream Configuration Template
# Stream module for Layer 4 (TCP/UDP) database protocol proxying
# Format: HOST_MAPPING=PROTOCOL:::HOSTNAME:::CONTAINER_PORT

{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

# Database Protocol Configuration Variables
{{ $postgresql_ports := split (coalesce $.Env.POSTGRESQL_PORTS "5432") "," }}
{{ $postgresql_ssl_ports := split (coalesce $.Env.POSTGRESQL_SSL_PORTS "5433") "," }}
{{ $mysql_ports := split (coalesce $.Env.MYSQL_PORTS "3306") "," }}
{{ $mysql_ssl_ports := split (coalesce $.Env.MYSQL_SSL_PORTS "3307") "," }}
{{ $redis_ports := split (coalesce $.Env.REDIS_PORTS "6379") "," }}
{{ $redis_ssl_ports := split (coalesce $.Env.REDIS_SSL_PORTS "6380") "," }}
{{ $mongodb_ports := split (coalesce $.Env.MONGODB_PORTS "27017") "," }}
{{ $mongodb_ssl_ports := split (coalesce $.Env.MONGODB_SSL_PORTS "27018") "," }}

# Database upstream definitions
{{ range $host_mapping, $containers := groupByMulti $ "Env.HOST_MAPPING" "," }}
{{ if $host_mapping }}
{{ $mappings := split $host_mapping "," }}
{{ range $mapping := $mappings }}
{{ $parts := split $mapping ":::" }}
{{ if eq (len $parts) 3 }}
{{ $protocol := index $parts 0 }}
{{ $hostname := index $parts 1 }}
{{ $port := index $parts 2 }}

{{ if eq $protocol "POSTGRESQL" }}
# PostgreSQL upstream: {{ $hostname }} -> containers:{{ $port }}
upstream {{ $hostname }}-postgresql {
{{ range $container := $containers }}
    {{ $network := index $container.Networks 0 }}
    # {{ $container.Name }}
    server {{ $network.IP }}:{{ $port }};
{{ end }}
}
{{ end }}

{{ if eq $protocol "MYSQL" }}
# MySQL upstream: {{ $hostname }} -> containers:{{ $port }}
upstream {{ $hostname }}-mysql {
{{ range $container := $containers }}
    {{ $network := index $container.Networks 0 }}
    # {{ $container.Name }}
    server {{ $network.IP }}:{{ $port }};
{{ end }}
}
{{ end }}

{{ if eq $protocol "REDIS" }}
# Redis upstream: {{ $hostname }} -> containers:{{ $port }}
upstream {{ $hostname }}-redis {
{{ range $container := $containers }}
    {{ $network := index $container.Networks 0 }}
    # {{ $container.Name }}
    server {{ $network.IP }}:{{ $port }};
{{ end }}
}
{{ end }}

{{ if eq $protocol "MONGODB" }}
# MongoDB upstream: {{ $hostname }} -> containers:{{ $port }}
upstream {{ $hostname }}-mongodb {
{{ range $container := $containers }}
    {{ $network := index $container.Networks 0 }}
    # {{ $container.Name }}
    server {{ $network.IP }}:{{ $port }};
{{ end }}
}
{{ end }}

{{ end }}
{{ end }}
{{ end }}
{{ end }}

# PostgreSQL Servers
{{ range $host_mapping, $containers := groupByMulti $ "Env.HOST_MAPPING" "," }}
{{ if $host_mapping }}
{{ $mappings := split $host_mapping "," }}
{{ range $mapping := $mappings }}
{{ $parts := split $mapping ":::" }}
{{ if eq (len $parts) 3 }}
{{ $protocol := index $parts 0 }}
{{ $hostname := index $parts 1 }}
{{ $port := index $parts 2 }}

{{ if eq $protocol "POSTGRESQL" }}
# PostgreSQL Server: {{ $hostname }} -> container:{{ $port }}
{{ range $postgresql_port := $postgresql_ports }}
server {
    listen {{ $postgresql_port }};
    proxy_pass {{ $hostname }}-postgresql;
    proxy_timeout 60s;
    proxy_connect_timeout 10s;
    proxy_responses 1;
}
{{ end }}

# PostgreSQL SSL Server: {{ $hostname }} -> container:{{ $port }} (SSL Passthrough)
{{ range $postgresql_ssl_port := $postgresql_ssl_ports }}
server {
    listen {{ $postgresql_ssl_port }} ssl;
    proxy_pass {{ $hostname }}-postgresql;
    proxy_timeout 60s;
    proxy_connect_timeout 10s;
    proxy_responses 1;

    # SSL Configuration
    {{ $cert_file := printf "/etc/nginx/certs/%s.crt" $hostname }}
    {{ $key_file := printf "/etc/nginx/certs/%s.key" $hostname }}
    ssl_certificate {{ $cert_file }};
    ssl_certificate_key {{ $key_file }};
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
}
{{ end }}
{{ end }}

{{ end }}
{{ end }}
{{ end }}
{{ end }}

# MySQL Servers
{{ range $host_mapping, $containers := groupByMulti $ "Env.HOST_MAPPING" "," }}
{{ if $host_mapping }}
{{ $mappings := split $host_mapping "," }}
{{ range $mapping := $mappings }}
{{ $parts := split $mapping ":::" }}
{{ if eq (len $parts) 3 }}
{{ $protocol := index $parts 0 }}
{{ $hostname := index $parts 1 }}
{{ $port := index $parts 2 }}

{{ if eq $protocol "MYSQL" }}
# MySQL Server: {{ $hostname }} -> container:{{ $port }}
{{ range $mysql_port := $mysql_ports }}
server {
    listen {{ $mysql_port }};
    proxy_pass {{ $hostname }}-mysql;
    proxy_timeout 60s;
    proxy_connect_timeout 10s;
    proxy_responses 1;
}
{{ end }}

# MySQL SSL Server: {{ $hostname }} -> container:{{ $port }} (SSL Termination)
{{ range $mysql_ssl_port := $mysql_ssl_ports }}
server {
    listen {{ $mysql_ssl_port }} ssl;
    proxy_pass {{ $hostname }}-mysql;
    proxy_timeout 60s;
    proxy_connect_timeout 10s;
    proxy_responses 1;

    # SSL Configuration
    {{ $cert_file := printf "/etc/nginx/certs/%s.crt" $hostname }}
    {{ $key_file := printf "/etc/nginx/certs/%s.key" $hostname }}
    ssl_certificate {{ $cert_file }};
    ssl_certificate_key {{ $key_file }};
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
}
{{ end }}
{{ end }}

{{ end }}
{{ end }}
{{ end }}
{{ end }}

# Redis Servers
{{ range $host_mapping, $containers := groupByMulti $ "Env.HOST_MAPPING" "," }}
{{ if $host_mapping }}
{{ $mappings := split $host_mapping "," }}
{{ range $mapping := $mappings }}
{{ $parts := split $mapping ":::" }}
{{ if eq (len $parts) 3 }}
{{ $protocol := index $parts 0 }}
{{ $hostname := index $parts 1 }}
{{ $port := index $parts 2 }}

{{ if eq $protocol "REDIS" }}
# Redis Server: {{ $hostname }} -> container:{{ $port }}
{{ range $redis_port := $redis_ports }}
server {
    listen {{ $redis_port }};
    proxy_pass {{ $hostname }}-redis;
    proxy_timeout 60s;
    proxy_connect_timeout 10s;
}
{{ end }}
{{ end }}

{{ end }}
{{ end }}
{{ end }}
{{ end }}

# MongoDB Servers
{{ range $host_mapping, $containers := groupByMulti $ "Env.HOST_MAPPING" "," }}
{{ if $host_mapping }}
{{ $mappings := split $host_mapping "," }}
{{ range $mapping := $mappings }}
{{ $parts := split $mapping ":::" }}
{{ if eq (len $parts) 3 }}
{{ $protocol := index $parts 0 }}
{{ $hostname := index $parts 1 }}
{{ $port := index $parts 2 }}

{{ if eq $protocol "MONGODB" }}
# MongoDB Server: {{ $hostname }} -> container:{{ $port }}
{{ range $mongodb_port := $mongodb_ports }}
server {
    listen {{ $mongodb_port }};
    proxy_pass {{ $hostname }}-mongodb;
    proxy_timeout 60s;
    proxy_connect_timeout 10s;
    proxy_responses 1;
}
{{ end }}
{{ end }}

{{ end }}
{{ end }}
{{ end }}
{{ end }}
