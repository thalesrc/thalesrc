# Thales Auto Proxy Stream Configuration Template
# Stream module for Layer 4 (TCP/UDP) database protocol proxying
# Format: HOST_MAPPING=DATABASE:::HOSTNAME:::CONTAINER_PORT
# Supports: PostgreSQL, MySQL, Redis, MongoDB, and other TCP-based databases

{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

# Database Protocol Configuration Variables
{{ $database_ports := split (coalesce $.Env.DATABASE_PORTS "5432,3306,6379,27017") "," }}

# Database upstream definitions
{{ range $host_mapping, $containers := groupByMulti $ "Env.HOST_MAPPING" "," }}
{{ if $host_mapping }}
{{ $mappings := split $host_mapping "," }}
{{ range $mapping := $mappings }}
{{ $parts := split $mapping ":::" }}
{{ if eq (len $parts) 3 }}
{{ $protocol := index $parts 0 }}
{{ $hostname := index $parts 1 }}
{{ $port := index $parts 2 }}

{{ if eq $protocol "DATABASE" }}
# Database upstream: {{ $hostname }} -> containers:{{ $port }}
upstream {{ $hostname }}-database {
{{ range $container := $containers }}
    {{ $network := index $container.Networks 0 }}
    # {{ $container.Name }}
    server {{ $network.IP }}:{{ $port }};
{{ end }}
}
{{ end }}

{{ end }}
{{ end }}
{{ end }}
{{ end }}

# Database Servers (PostgreSQL, MySQL, Redis, MongoDB, etc.)
{{ range $host_mapping, $containers := groupByMulti $ "Env.HOST_MAPPING" "," }}
{{ if $host_mapping }}
{{ $mappings := split $host_mapping "," }}
{{ range $mapping := $mappings }}
{{ $parts := split $mapping ":::" }}
{{ if eq (len $parts) 3 }}
{{ $protocol := index $parts 0 }}
{{ $hostname := index $parts 1 }}
{{ $port := index $parts 2 }}

{{ if eq $protocol "DATABASE" }}
# Database Server: {{ $hostname }} -> container:{{ $port }} (TCP Passthrough)
{{ range $database_port := $database_ports }}
server {
    listen {{ $database_port }};
    proxy_pass {{ $hostname }}-database;
    proxy_timeout 60s;
    proxy_connect_timeout 10s;
    proxy_responses 1;
    # SSL/TLS negotiation handled by database server
}
{{ end }}
{{ end }}

{{ end }}
{{ end }}
{{ end }}
{{ end }}
