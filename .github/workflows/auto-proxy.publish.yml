name: Auto Proxy / Publish

on:
  repository_dispatch:
    types: [publish-auto-proxy]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: thalesrc/auto-proxy

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      TAG_NAME: ${{ github.event.client_payload.tag }}

    steps:
      - name: Set package version env variable
        run: echo "PACKAGE_VERSION=${TAG_NAME#auto-proxy-v}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare Docker context with library README
        run: |
          # Copy the auto-proxy README to the root for GitHub Container Registry
          cp libs/auto-proxy/README.md ./README.md

          # Verify the README exists in the Docker context
          ls -la libs/auto-proxy/README.md

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ env.PACKAGE_VERSION }}
          labels: |
            org.opencontainers.image.title=Thales Auto Proxy
            org.opencontainers.image.description=Docker-aware nginx reverse proxy with automatic SSL and service discovery
            org.opencontainers.image.vendor=Thales
            org.opencontainers.image.version=${{ env.PACKAGE_VERSION }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}/tree/main/libs/auto-proxy
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: libs/auto-proxy
          file: libs/auto-proxy/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update GitHub Container Registry description
        run: |
          # Update the package description using GitHub API (organization endpoint)
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/orgs/thalesrc/packages/container/auto-proxy \
            -d "{\"description\":\"Docker-aware nginx reverse proxy with automatic SSL and service discovery\"}" || true

      - name: Create release summary
        run: |
          echo "## 🐳 Successfully Published Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** \`auto-proxy\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`$PACKAGE_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** \`$TAG_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Available Tags:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$PACKAGE_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Usage:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$PACKAGE_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 80:80 -p 443:443 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$PACKAGE_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Docker image has been successfully published to GitHub Container Registry! 🎉" >> $GITHUB_STEP_SUMMARY
